{"version":3,"sources":["components/ListPanel.js","components/FinalPlace.js","App.js","serviceWorker.js","index.js"],"names":["ListPanel","p","color","item","onSelect","add","address","split","length","area","city","className","style","backgroundColor","onClick","FinalPlace","clrToggle","selectedPlaceInfo","font","fontSize","pType","uCode","SimpleExample","props","autoComplete","query","a","setState","inputValue","fetch","response","json","results","places","message","console","log","navigate","selectedPlace","lat","latitude","lng","longitude","state","zoom","search","toggle","colorToggle","position","this","width","variant","placeholder","value","onChange","e","target","type","name","Switch","size","visibility","map","Map","height","zIndex","center","TileLayer","attribution","url","Marker","Popup","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6936542d.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Style/style.css';\r\n\r\nlet ListPanel = ({ color, item, onSelect }) => {\r\n    let add = item.address.split(',');\r\n    //console.log(add);\r\n    let p;\r\n    if (add.length === 3) {\r\n        p = (\r\n            <p>\r\n                {add[1]}, {add[2]}, {item.area}, {item.city}\r\n            </p>\r\n        );\r\n    } else if (add.length === 2) {\r\n        p = (\r\n            <p>\r\n                {add[1]}, {item.area}, {item.city}\r\n            </p>\r\n        );\r\n    } else {\r\n        p = (\r\n            <p>\r\n                {item.area}, {item.city}\r\n            </p>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <li className='list' style={{ backgroundColor: color }} onClick={onSelect}>\r\n            <span>\r\n                <h5>{add[0]}</h5>\r\n                {'\\n'}\r\n                {p}\r\n            </span>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default ListPanel;\r\n","import React from 'react';\r\nimport '../Style/style.css';\r\n\r\nlet FinalPlace = ({ clrToggle, selectedPlaceInfo }) => {\r\n    //console.log(selectedPlaceInfo, clrToggle);\r\n    let add = selectedPlaceInfo.address.split(',');\r\n    //console.log(add);\r\n    let p;\r\n    if (add.length === 3) {\r\n        p = (\r\n            <span style={{ font: 'Rubik, sans-serif', fontSize: '18px'}}>\r\n                {add[1]}, {add[2]}, {selectedPlaceInfo.area}, {selectedPlaceInfo.city}\r\n            </span>\r\n        );\r\n    } else if (add.length === 2) {\r\n        p = (\r\n            <span style={{ font: 'Rubik, sans-serif', fontSize: '18px'}}>\r\n                {add[1]}, {selectedPlaceInfo.area}, {selectedPlaceInfo.city}\r\n            </span>\r\n        );\r\n    } else {\r\n        p = (\r\n            <span style={{ font: 'Rubik, sans-serif', fontSize: '18px'}}>\r\n                {selectedPlaceInfo.area}, {selectedPlaceInfo.city}\r\n            </span>\r\n        );\r\n    }\r\n    return (\r\n        <div className='address_details' style={{ color: clrToggle }}>\r\n            <span style={{ font: 'roboto, sans-serif', fontSize: '30px'}}>{add[0]}</span>\r\n            <br />\r\n            {p}\r\n            <br />\r\n            <span style={{ font: 'Rubik, sans-serif', fontSize: '15px'}}>{selectedPlaceInfo.pType}</span>\r\n            <br />\r\n            <span style={{ font: 'Rubik, sans-serif', fontSize: '15px'}}>Place Code : {selectedPlaceInfo.uCode}</span>\r\n            <br />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FinalPlace;\r\n","import React, { Component } from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport './Style/style.css';\nimport Switch from '@material-ui/core/Switch';\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport ListPanel from './components/ListPanel';\nimport FinalPlace from './components/FinalPlace';\n\nexport default class SimpleExample extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lat: 23.8222241417755,\n            lng: 90.37166330963373,\n            zoom: 20,\n            search: '',\n            places: [],\n            toggle: false,\n            colorToggle: false,\n            selectedPlace: null,\n            inputValue: '',\n        };\n    }\n\n    autoComplete = async (query) => {\n        this.setState({ inputValue: query });\n        try {\n            let response = await fetch(`https://barikoi.xyz/v1/api/search/autocomplete/MTg4Mzo5V0tENzgyVVBW/place?q=${query}`);\n            let results = await response.json();\n            //console.log('results', results);\n            this.setState({ places: results.message ? [] : results.places });\n        } catch (error) {\n            console.log('fetch error', error);\n        }\n    };\n    navigate = (item) => {\n        this.setState({\n            inputValue: item.address,\n            selectedPlace: item,\n            places: [],\n            lat: item.latitude,\n            lng: item.longitude,\n        });\n    };\n    render() {\n        const position = [this.state.lat, this.state.lng];\n        return (\n            <div className='container'>\n                <div className='search_container' style={{ backgroundColor: this.state.colorToggle ? '#867f80' : 'white', width: this.state.toggle ? '0px' : '40%' }}>\n                    {this.state.toggle === true && (\n                        <button className='rightButton' onClick={() => this.setState({ toggle: false })}>\n                            <KeyboardArrowRightIcon />\n                        </button>\n                    )}\n                    <div className='input_container'>\n                        <div className='input'>\n                            <input\n                                className={this.state.colorToggle ? 'text_input-light' : 'text_input-dark'}\n                                variant='outlined'\n                                placeholder='Search Location.'\n                                autoComplete='off'\n                                value={this.state.inputValue}\n                                onChange={(e) => {\n                                    this.autoComplete(e.target.value);\n                                }}\n                                type='text'\n                                name='name'\n                            />\n\n                            <Switch color='primary' size='medium' onChange={() => this.setState({ colorToggle: !this.state.colorToggle })} />\n                        </div>\n\n                        {this.state.toggle !== true && (\n                            <ul\n                                className='list_container'\n                                style={{\n                                    visibility: this.state.inputValue === '' ? 'hidden' : 'visible',\n                                }}\n                            >\n                                {this.state.places.map((item) => {\n                                    return <ListPanel color={this.state.colorToggle ? 'yellow' : '#f6f6f6'} onSelect={() => this.navigate(item)} item={item} />;\n                                })}\n                            </ul>\n                        )}\n\n                        {this.state.selectedPlace && <FinalPlace clrToggle={this.state.colorToggle ? 'white' : 'black'} selectedPlaceInfo={this.state.selectedPlace} />}\n                    </div>\n                </div>\n\n                <div className='map_container' style={{ width: this.state.toggle ? '100%' : '50%' }}>\n                    {this.state.toggle === false && (\n                        <button\n                            className='leftButton'\n                            onClick={() => {\n                                this.setState({ toggle: true });\n                            }}\n                        >\n                            <KeyboardArrowLeftIcon />\n                        </button>\n                    )}\n\n                    <Map style={{ width: '100%', height: '100vh', zIndex: 0 }} center={position} zoom={this.state.zoom}>\n                        <TileLayer\n                            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                            url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n                        />\n                        {this.state.selectedPlace !== null && (\n                            <Marker position={[this.state.selectedPlace.latitude, this.state.selectedPlace.longitude]}>\n                                <Popup>{this.state.selectedPlace.address}</Popup>\n                            </Marker>\n                        )}\n                    </Map>\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}